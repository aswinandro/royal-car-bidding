# version: '3.8'

# services:
#   # PostgreSQL Database
#   postgres:
#     image: postgres:15-alpine
#     container_name: car-auction-postgres-prod
#     environment:
#       POSTGRES_DB: car_auction
#       POSTGRES_USER: ${DB_USER:-postgres}
#       POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
#     ports:
#       - "${DB_PORT:-5432}:5432"
#     volumes:
#       - postgres_data_prod:/var/lib/postgresql/data
#     networks:
#       - car-auction-network
#     restart: unless-stopped

#   # Redis Cache
#   redis:
#     image: redis:7-alpine
#     container_name: car-auction-redis-prod
#     ports:
#       - "${REDIS_PORT:-6379}:6379"
#     volumes:
#       - redis_data_prod:/data
#     networks:
#       - car-auction-network
#     restart: unless-stopped
#     command: redis-server --appendonly yes

#   # RabbitMQ Message Queue
#   rabbitmq:
#     image: rabbitmq:3-management-alpine
#     container_name: car-auction-rabbitmq-prod
#     environment:
#       RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
#       RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
#     ports:
#       - "${RABBITMQ_PORT:-5672}:5672"
#       - "${RABBITMQ_MGMT_PORT:-15672}:15672"
#     volumes:
#       - rabbitmq_data_prod:/var/lib/rabbitmq
#     networks:
#       - car-auction-network
#     restart: unless-stopped

#   # Backend API
#   backend:
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#       target: production
#     container_name: car-auction-backend-prod
#     environment:
#       DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-password}@postgres:5432/car_auction
#       REDIS_HOST: redis
#       REDIS_PORT: 6379
#       RABBITMQ_URL: amqp://rabbitmq:5672
#       RABBITMQ_USERNAME: ${RABBITMQ_USER:-guest}
#       RABBITMQ_PASSWORD: ${RABBITMQ_PASS:-guest}
#       JWT_SECRET: ${JWT_SECRET}
#       PORT: 3001
#       NODE_ENV: production
#       FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
#     ports:
#       - "${BACKEND_PORT:-3001}:3001"
#     depends_on:
#       - postgres
#       - redis
#       - rabbitmq
#     networks:
#       - car-auction-network
#     restart: unless-stopped
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
#       interval: 30s
#       timeout: 10s
#       retries: 3

#   # Frontend
#   frontend:
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile
#       target: production
#     container_name: car-auction-frontend-prod
#     environment:
#       VITE_API_URL: ${API_URL:-http://localhost:3001}
#       VITE_WS_URL: ${WS_URL:-http://localhost:3001}
#     ports:
#       - "${FRONTEND_PORT:-3000}:80"
#     depends_on:
#       - backend
#     networks:
#       - car-auction-network
#     restart: unless-stopped

# volumes:
#   postgres_data_prod:
#   redis_data_prod:
#   rabbitmq_data_prod:

# networks:
#   car-auction-network:
#     driver: bridge
